"""
This Python script reads the CSV file generated by memdump.dll and decodes the strings in the hex memory data

"""

import csv
import sys
import argparse
import os

def byte_is_printable(b: int) -> bool:
    return 32 <= b < 127 

def process_hex_string(hex_str):
    byte_values = [int(b, 16) for b in hex_str.strip().split()]

    s = []
    for i, val in enumerate(byte_values):
        #print(f"Index {i:02}: 0x{val:02X} ({val})")
        if byte_is_printable(val):
            s.append(val)

    if not s:
        ret = '<no string>'
    else:
        ret = ''.join(chr(v) for v in s)

    return ret

def process_hex_char(hex_str):
    byte_values = [int(b, 16) for b in hex_str.strip().split()]

    s = []
    for i, val in enumerate(byte_values):
        #print(f"Index {i:02}: 0x{val:02X} {val:03} = {chr(val)}")
        if byte_is_printable(val):
            s.append(chr(val))
        else:
            s.append('.')

    ret = ''.join(v for v in s)

    return ret

def main():

    allowed = set("? ")

    parser = argparse.ArgumentParser(description="Example: -f <csv-filename> [-a]")

    parser.add_argument('-f', metavar='<filename>', required=True, help='Path to the csv file')

    parser.add_argument('-a', '--ascii', action='store_true',
                        help='Enable ascii only output')

    args = parser.parse_args()

    if not os.path.isfile(args.f):
        print(f"Error: CSV file not found: {args.file}", file=sys.stderr)
        sys.exit(2)

    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <csvfile>")
        sys.exit(1)

    filename = args.f

    pc = []
    hex_vals = []

    with open(filename, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            pc_val = int(row["pc"], 16)     # Hexstring -> int
            ascii_val = row["hex"]

            # Filter "?? ?? ?? ..." fields (unreadable memory)
            if set(ascii_val).issubset(allowed):
                continue
            pc.append(pc_val)
            hex_vals.append(ascii_val)

    if (args.ascii):
        for p, h in zip(pc, hex_vals):
            s = process_hex_char(h)
            print(f"pc=0x{p:08X}, hex='{h[:-1]}' ascii={s}")
    else:
        for p, h in zip(pc, hex_vals):
            s = process_hex_string(h)
            print(f"pc=0x{p:08X}, hex='{h[:-1]}' string={s}")


if __name__ == "__main__":
    main()
